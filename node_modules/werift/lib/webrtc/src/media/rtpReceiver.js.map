{"version":3,"file":"rtpReceiver.js","sourceRoot":"","sources":["../../../../src/media/rtpReceiver.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from \"debug\";\nimport Event from \"rx.mini\";\nimport { setTimeout } from \"timers/promises\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { int } from \"../../../common/src\";\nimport {\n  PictureLossIndication,\n  Red,\n  RedHandler,\n  RtcpPacket,\n  RtcpPayloadSpecificFeedback,\n  RtcpReceiverInfo,\n  RtcpRrPacket,\n  RtcpSrPacket,\n  RTP_EXTENSION_URI,\n  RtpPacket,\n  TransportWideCCPayload,\n  unwrapRtx,\n} from \"../../../rtp/src\";\nimport { codecParametersFromString, PeerConfig, usePLI, useTWCC } from \"..\";\nimport { RTCDtlsTransport } from \"../transport/dtls\";\nimport { Kind } from \"../types/domain\";\nimport { compactNtp, timestampSeconds } from \"../utils\";\nimport { RTCRtpCodecParameters, RTCRtpReceiveParameters } from \"./parameters\";\nimport { NackHandler } from \"./receiver/nack\";\nimport { ReceiverTWCC } from \"./receiver/receiverTwcc\";\nimport { StreamStatistics } from \"./receiver/statistics\";\nimport { Extensions } from \"./router\";\nimport { MediaStreamTrack } from \"./track\";\n\nconst log = debug(\"werift:packages/webrtc/src/media/rtpReceiver.ts\");\n\nexport class RTCRtpReceiver {\n  private readonly codecs: { [pt: number]: RTCRtpCodecParameters } = {};\n  private get codecArray() {\n    return Object.values(this.codecs).sort(\n      (a, b) => a.payloadType - b.payloadType\n    );\n  }\n  private readonly ssrcByRtx: { [rtxSsrc: number]: number } = {};\n  private readonly nack = new NackHandler(this);\n  private readonly audioRedHandler = new RedHandler();\n\n  readonly type = \"receiver\";\n  readonly uuid = uuid();\n  readonly tracks: MediaStreamTrack[] = [];\n  readonly trackBySSRC: { [ssrc: string]: MediaStreamTrack } = {};\n  readonly trackByRID: { [rid: string]: MediaStreamTrack } = {};\n  /**last sender Report Timestamp\n   * compactNtp\n   */\n  readonly lastSRtimestamp: { [ssrc: number]: number } = {};\n  /**seconds */\n  readonly receiveLastSRTimestamp: { [ssrc: number]: number } = {};\n  readonly onPacketLost = this.nack.onPacketLost;\n  readonly onRtcp = new Event<[RtcpPacket]>();\n\n  dtlsTransport!: RTCDtlsTransport;\n  sdesMid?: string;\n  latestRid?: string;\n  latestRepairedRid?: string;\n\n  receiverTWCC?: ReceiverTWCC;\n  stopped = false;\n  remoteStreamId?: string;\n  remoteTrackId?: string;\n\n  rtcpRunning = false;\n  private rtcpCancel = new AbortController();\n  private remoteStreams: { [ssrc: number]: StreamStatistics } = {};\n\n  constructor(\n    readonly config: PeerConfig,\n    public kind: Kind,\n    public rtcpSsrc: number\n  ) {}\n\n  setDtlsTransport(dtls: RTCDtlsTransport) {\n    this.dtlsTransport = dtls;\n  }\n\n  // todo fix\n  get track() {\n    return this.tracks[0];\n  }\n\n  get nackEnabled() {\n    return this.codecArray[0]?.rtcpFeedback.find((f) => f.type === \"nack\");\n  }\n\n  get twccEnabled() {\n    return this.codecArray[0]?.rtcpFeedback.find(\n      (f) => f.type === useTWCC().type\n    );\n  }\n\n  get pliEnabled() {\n    return this.codecArray[0]?.rtcpFeedback.find(\n      (f) => f.type === usePLI().type\n    );\n  }\n\n  prepareReceive(params: RTCRtpReceiveParameters) {\n    params.codecs.forEach((c) => {\n      this.codecs[c.payloadType] = c;\n    });\n    params.encodings.forEach((e) => {\n      if (e.rtx) {\n        this.ssrcByRtx[e.rtx.ssrc] = e.ssrc;\n      }\n    });\n  }\n\n  /**\n   * setup TWCC if supported\n   */\n  setupTWCC(mediaSourceSsrc: number) {\n    if (this.twccEnabled && !this.receiverTWCC) {\n      this.receiverTWCC = new ReceiverTWCC(\n        this.dtlsTransport,\n        this.rtcpSsrc,\n        mediaSourceSsrc\n      );\n    }\n  }\n\n  addTrack(track: MediaStreamTrack) {\n    const exist = this.tracks.find((t) => {\n      if (t.rid) {\n        return t.rid === track.rid;\n      }\n      if (t.ssrc) {\n        return t.ssrc === track.ssrc;\n      }\n    });\n    if (exist) {\n      return false;\n    }\n    this.tracks.push(track);\n    if (track.ssrc) {\n      this.trackBySSRC[track.ssrc] = track;\n    }\n    if (track.rid) {\n      this.trackByRID[track.rid] = track;\n    }\n    return true;\n  }\n\n  stop() {\n    this.stopped = true;\n    this.rtcpRunning = false;\n    this.rtcpCancel.abort();\n\n    if (this.receiverTWCC) this.receiverTWCC.twccRunning = false;\n    this.nack.close();\n  }\n\n  async runRtcp() {\n    if (this.rtcpRunning || this.stopped) return;\n    this.rtcpRunning = true;\n\n    try {\n      while (this.rtcpRunning) {\n        await setTimeout(500 + Math.random() * 1000, undefined, {\n          signal: this.rtcpCancel.signal,\n        });\n\n        const reports = Object.entries(this.remoteStreams).map(\n          ([ssrc, stream]) => {\n            let lastSRtimestamp = 0,\n              delaySinceLastSR = 0;\n            if (this.lastSRtimestamp[ssrc]) {\n              lastSRtimestamp = this.lastSRtimestamp[ssrc];\n              const delaySeconds =\n                timestampSeconds() - this.receiveLastSRTimestamp[ssrc];\n              if (delaySeconds > 0 && delaySeconds < 65536) {\n                delaySinceLastSR = int(delaySeconds * 65536);\n              }\n            }\n\n            return new RtcpReceiverInfo({\n              ssrc: Number(ssrc),\n              fractionLost: stream.fraction_lost,\n              packetsLost: stream.packets_lost,\n              highestSequence: stream.max_seq,\n              jitter: stream.jitter,\n              lsr: lastSRtimestamp,\n              dlsr: delaySinceLastSR,\n            });\n          }\n        );\n\n        const packet = new RtcpRrPacket({ ssrc: this.rtcpSsrc, reports });\n\n        try {\n          if (this.config.debug.receiverReportDelay) {\n            await setTimeout(this.config.debug.receiverReportDelay);\n          }\n          await this.dtlsTransport.sendRtcp([packet]);\n        } catch (error) {\n          log(\"sendRtcp failed\", error);\n          await setTimeout(500 + Math.random() * 1000);\n        }\n      }\n    } catch (error) {}\n  }\n\n  /**todo impl */\n  getStats() {}\n\n  async sendRtcpPLI(mediaSsrc: number) {\n    if (!this.pliEnabled) {\n      log(\"pli not supported\", { mediaSsrc });\n      return;\n    }\n\n    if (this.stopped) {\n      return;\n    }\n\n    log(\"sendRtcpPLI\", { mediaSsrc });\n\n    const packet = new RtcpPayloadSpecificFeedback({\n      feedback: new PictureLossIndication({\n        senderSsrc: this.rtcpSsrc,\n        mediaSsrc,\n      }),\n    });\n    try {\n      await this.dtlsTransport.sendRtcp([packet]);\n    } catch (error) {\n      log(error);\n    }\n  }\n\n  handleRtcpPacket(packet: RtcpPacket) {\n    switch (packet.type) {\n      case RtcpSrPacket.type:\n        {\n          const sr = packet as RtcpSrPacket;\n          this.lastSRtimestamp[sr.ssrc] = compactNtp(\n            sr.senderInfo.ntpTimestamp\n          );\n          this.receiveLastSRTimestamp[sr.ssrc] = timestampSeconds();\n\n          const track = this.trackBySSRC[packet.ssrc];\n          if (track) {\n            track.onReceiveRtcp.execute(packet);\n          }\n        }\n        break;\n    }\n    this.onRtcp.execute(packet);\n  }\n\n  handleRtpBySsrc = (packet: RtpPacket, extensions: Extensions) => {\n    const track = this.trackBySSRC[packet.header.ssrc];\n\n    this.handleRTP(packet, extensions, track);\n  };\n\n  handleRtpByRid = (packet: RtpPacket, rid: string, extensions: Extensions) => {\n    const track = this.trackByRID[rid];\n    if (!this.trackBySSRC[packet.header.ssrc]) {\n      this.trackBySSRC[packet.header.ssrc] = track;\n    }\n\n    this.handleRTP(packet, extensions, track);\n  };\n\n  private handleRTP(\n    packet: RtpPacket,\n    extensions: Extensions,\n    track?: MediaStreamTrack\n  ) {\n    if (this.stopped) {\n      return;\n    }\n\n    const codec = this.codecs[packet.header.payloadType];\n    if (!codec) {\n      // log(\"unknown codec \" + packet.header.payloadType);\n      return;\n    }\n\n    this.remoteStreams[packet.header.ssrc] =\n      this.remoteStreams[packet.header.ssrc] ??\n      new StreamStatistics(codec.clockRate);\n    this.remoteStreams[packet.header.ssrc].add(packet);\n\n    if (this.receiverTWCC) {\n      const transportSequenceNumber = extensions[\n        RTP_EXTENSION_URI.transportWideCC\n      ] as TransportWideCCPayload;\n\n      if (!transportSequenceNumber == undefined) {\n        throw new Error(\"undefined\");\n      }\n\n      this.receiverTWCC.handleTWCC(transportSequenceNumber);\n    } else if (this.twccEnabled) {\n      this.setupTWCC(packet.header.ssrc);\n    }\n\n    if (codec.name.toLowerCase() === \"rtx\") {\n      const originalSsrc = this.ssrcByRtx[packet.header.ssrc];\n      const codecParams = codecParametersFromString(codec.parameters ?? \"\");\n      const rtxCodec = this.codecs[codecParams[\"apt\"]];\n      if (packet.payload.length < 2) return;\n\n      packet = unwrapRtx(packet, rtxCodec.payloadType, originalSsrc);\n      track = this.trackBySSRC[originalSsrc];\n    }\n\n    let red: Red | undefined;\n    if (codec.name.toLowerCase() === \"red\") {\n      red = Red.deSerialize(packet.payload);\n      if (\n        !Object.keys(this.codecs).includes(\n          red.header.fields[0].blockPT.toString()\n        )\n      ) {\n        return;\n      }\n    }\n\n    if (track?.kind === \"video\" && this.nackEnabled) {\n      this.nack.addPacket(packet);\n    }\n\n    if (track) {\n      if (red) {\n        if (track.kind === \"audio\") {\n          const payloads = this.audioRedHandler.push(red, packet);\n          for (const packet of payloads) {\n            track.onReceiveRtp.execute(packet.clone());\n          }\n        } else {\n        }\n      } else {\n        track.onReceiveRtp.execute(packet.clone());\n      }\n    }\n\n    this.runRtcp();\n  }\n}\n"]}
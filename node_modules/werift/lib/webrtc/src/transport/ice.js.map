{"version":3,"file":"ice.js","sourceRoot":"","sources":["../../../../src/transport/ice.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport Event from \"rx.mini\";\nimport { v4 } from \"uuid\";\n\nimport { Candidate, Connection, IceOptions } from \"../../../ice/src\";\nimport { candidateFromSdp, candidateToSdp } from \"../sdp\";\n\nconst log = debug(\"werift:packages/webrtc/src/transport/ice.ts\");\n\nexport class RTCIceTransport {\n  readonly id = v4();\n  connection: Connection;\n  state: RTCIceConnectionState = \"new\";\n\n  readonly onStateChange = new Event<[RTCIceConnectionState]>();\n\n  private waitStart?: Event<[]>;\n\n  constructor(private gather: RTCIceGatherer) {\n    this.connection = this.gather.connection;\n    this.connection.stateChanged.subscribe((state) => {\n      this.setState(state);\n    });\n  }\n\n  get iceGather() {\n    return this.gather;\n  }\n\n  get role() {\n    if (this.connection.iceControlling) return \"controlling\";\n    else return \"controlled\";\n  }\n\n  private setState(state: RTCIceConnectionState) {\n    if (state !== this.state) {\n      this.state = state;\n\n      if (this.onStateChange.ended) return;\n\n      if (state === \"closed\") {\n        this.onStateChange.execute(state);\n        this.onStateChange.complete();\n      } else {\n        this.onStateChange.execute(state);\n      }\n    }\n  }\n\n  addRemoteCandidate = (candidate?: IceCandidate) => {\n    if (!this.connection.remoteCandidatesEnd) {\n      if (!candidate) {\n        return this.connection.addRemoteCandidate(undefined);\n      } else {\n        return this.connection.addRemoteCandidate(candidateToIce(candidate));\n      }\n    }\n  };\n\n  setRemoteParams(remoteParameters: RTCIceParameters) {\n    if (\n      this.connection.remoteUsername &&\n      this.connection.remotePassword &&\n      (this.connection.remoteUsername !== remoteParameters.usernameFragment ||\n        this.connection.remotePassword !== remoteParameters.password)\n    ) {\n      log(\"restartIce\", remoteParameters);\n      this.connection.resetNominatedPair();\n    }\n    this.connection.setRemoteParams(remoteParameters);\n  }\n\n  async start() {\n    if (this.state === \"closed\") throw new Error(\"RTCIceTransport is closed\");\n    if (!this.connection.remotePassword || !this.connection.remoteUsername)\n      throw new Error(\"remoteParams missing\");\n\n    if (this.waitStart) await this.waitStart.asPromise();\n    this.waitStart = new Event();\n\n    this.setState(\"checking\");\n\n    try {\n      await this.connection.connect();\n    } catch (error) {\n      this.setState(\"failed\");\n      throw error;\n    }\n\n    this.waitStart.complete();\n  }\n\n  async stop() {\n    if (this.state !== \"closed\") {\n      this.setState(\"closed\");\n      await this.connection.close();\n    }\n  }\n}\n\nexport const IceTransportStates = [\n  \"new\",\n  \"checking\",\n  \"connected\",\n  \"completed\",\n  \"disconnected\",\n  \"failed\",\n  \"closed\",\n] as const;\nexport type RTCIceConnectionState = typeof IceTransportStates[number];\n\nexport const IceGathererStates = [\"new\", \"gathering\", \"complete\"] as const;\nexport type IceGathererState = typeof IceGathererStates[number];\n\nexport class RTCIceGatherer {\n  onIceCandidate: (candidate: IceCandidate) => void = () => {};\n  gatheringState: IceGathererState = \"new\";\n\n  readonly onGatheringStateChange = new Event<[IceGathererState]>();\n  readonly connection: Connection;\n\n  constructor(private options: Partial<IceOptions> = {}) {\n    this.connection = new Connection(false, this.options);\n  }\n\n  async gather() {\n    if (this.gatheringState === \"new\") {\n      this.setState(\"gathering\");\n      await this.connection.gatherCandidates((candidate) =>\n        this.onIceCandidate(candidateFromIce(candidate))\n      );\n      this.setState(\"complete\");\n    }\n  }\n\n  get localCandidates() {\n    return this.connection.localCandidates.map(candidateFromIce);\n  }\n\n  get localParameters() {\n    const params = new RTCIceParameters({\n      usernameFragment: this.connection.localUserName,\n      password: this.connection.localPassword,\n    });\n\n    return params;\n  }\n\n  private setState(state: IceGathererState) {\n    if (state !== this.gatheringState) {\n      this.gatheringState = state;\n      this.onGatheringStateChange.execute(state);\n    }\n  }\n}\n\nexport function candidateFromIce(c: Candidate) {\n  const candidate = new IceCandidate(\n    c.component,\n    c.foundation,\n    c.host,\n    c.port,\n    c.priority,\n    c.transport,\n    c.type\n  );\n  candidate.relatedAddress = c.relatedAddress;\n  candidate.relatedPort = c.relatedPort;\n  candidate.tcpType = c.tcptype;\n  return candidate;\n}\n\nexport function candidateToIce(x: IceCandidate) {\n  return new Candidate(\n    x.foundation,\n    x.component,\n    x.protocol,\n    x.priority,\n    x.ip,\n    x.port,\n    x.type,\n    x.relatedAddress,\n    x.relatedPort,\n    x.tcpType\n  );\n}\n\nexport class RTCIceCandidate {\n  candidate!: string;\n  sdpMid?: string;\n  sdpMLineIndex?: number;\n\n  constructor(props: Partial<RTCIceCandidate>) {\n    Object.assign(this, props);\n  }\n\n  static isThis(o: any) {\n    if (typeof o?.candidate === \"string\") return true;\n  }\n\n  toJSON() {\n    return {\n      candidate: this.candidate,\n      sdpMid: this.sdpMid,\n      sdpMLineIndex: this.sdpMLineIndex,\n    };\n  }\n}\n\nexport class IceCandidate {\n  // \"\"\"\n  // The :class:`RTCIceCandidate` interface represents a candidate Interactive\n  // Connectivity Establishment (ICE) configuration which may be used to\n  // establish an RTCPeerConnection.\n  // \"\"\"\n  public relatedAddress?: string;\n  public relatedPort?: number;\n  public sdpMid?: string;\n  public sdpMLineIndex?: number;\n  public tcpType?: string;\n\n  constructor(\n    public component: number,\n    public foundation: string,\n    public ip: string,\n    public port: number,\n    public priority: number,\n    public protocol: string,\n    public type: string\n  ) {}\n\n  toJSON(): RTCIceCandidate {\n    return new RTCIceCandidate({\n      candidate: candidateToSdp(this),\n      sdpMLineIndex: this.sdpMLineIndex,\n      sdpMid: this.sdpMid,\n    });\n  }\n\n  static fromJSON(data: RTCIceCandidate) {\n    try {\n      const candidate = candidateFromSdp(data.candidate);\n      candidate.sdpMLineIndex = data.sdpMLineIndex;\n      candidate.sdpMid = data.sdpMid;\n      return candidate;\n    } catch (error) {}\n  }\n}\n\nexport class RTCIceParameters {\n  iceLite: boolean = false;\n  usernameFragment!: string;\n  password!: string;\n\n  constructor(props: Partial<RTCIceParameters> = {}) {\n    Object.assign(this, props);\n  }\n}\n"]}
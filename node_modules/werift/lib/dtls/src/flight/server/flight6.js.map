{"version":3,"file":"flight6.js","sourceRoot":"","sources":["../../../../../../dtls/src/flight/server/flight6.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\n\nimport { createCipher } from \"../../cipher/create\";\nimport {\n  prfExtendedMasterSecret,\n  prfMasterSecret,\n  prfPreMasterSecret,\n} from \"../../cipher/prf\";\nimport { CipherContext } from \"../../context/cipher\";\nimport { DtlsContext } from \"../../context/dtls\";\nimport { TransportContext } from \"../../context/transport\";\nimport { HandshakeType } from \"../../handshake/const\";\nimport { Certificate } from \"../../handshake/message/certificate\";\nimport { ChangeCipherSpec } from \"../../handshake/message/changeCipherSpec\";\nimport { CertificateVerify } from \"../../handshake/message/client/certificateVerify\";\nimport { ClientKeyExchange } from \"../../handshake/message/client/keyExchange\";\nimport { Finished } from \"../../handshake/message/finished\";\nimport { createPlaintext } from \"../../record/builder\";\nimport { ContentType } from \"../../record/const\";\nimport { FragmentedHandshake } from \"../../record/message/fragment\";\nimport { Flight } from \"../flight\";\n\nconst log = debug(\"werift-dtls : packages/dtls/flight/server/flight6.ts\");\n\nexport class Flight6 extends Flight {\n  constructor(\n    udp: TransportContext,\n    dtls: DtlsContext,\n    private cipher: CipherContext\n  ) {\n    super(udp, dtls, 6);\n  }\n\n  handleHandshake(handshake: FragmentedHandshake) {\n    this.dtls.bufferHandshakeCache([handshake], false, 5);\n\n    const message = (() => {\n      switch (handshake.msg_type) {\n        case HandshakeType.certificate_11:\n          return Certificate.deSerialize(handshake.fragment);\n        case HandshakeType.certificate_verify_15:\n          return CertificateVerify.deSerialize(handshake.fragment);\n        case HandshakeType.client_key_exchange_16:\n          return ClientKeyExchange.deSerialize(handshake.fragment);\n        case HandshakeType.finished_20:\n          return Finished.deSerialize(handshake.fragment);\n      }\n    })();\n\n    if (message) {\n      const handler = handlers[message.msgType];\n      if (!handler) {\n        // todo handle certificate_11\n        // todo handle certificate_verify_15\n        return;\n      }\n      handler({ dtls: this.dtls, cipher: this.cipher })(message);\n    }\n  }\n\n  async exec() {\n    if (this.dtls.flight === 6) {\n      log(this.dtls.sessionId, \"flight6 twice\");\n      this.send(this.dtls.lastMessage);\n      return;\n    }\n    this.dtls.flight = 6;\n\n    const messages = [this.sendChangeCipherSpec(), this.sendFinished()];\n    this.dtls.lastMessage = messages;\n    await this.transmit(messages);\n  }\n\n  private sendChangeCipherSpec() {\n    const changeCipherSpec = ChangeCipherSpec.createEmpty().serialize();\n    const packets = createPlaintext(this.dtls)(\n      [{ type: ContentType.changeCipherSpec, fragment: changeCipherSpec }],\n      ++this.dtls.recordSequenceNumber\n    );\n    const buf = Buffer.concat(packets.map((v) => v.serialize()));\n    return buf;\n  }\n\n  private sendFinished() {\n    const cache = Buffer.concat(\n      this.dtls.sortedHandshakeCache.map((v) => v.serialize())\n    );\n\n    const localVerifyData = this.cipher.verifyData(cache);\n    const finish = new Finished(localVerifyData);\n\n    this.dtls.epoch = 1;\n    const [packet] = this.createPacket([finish]);\n    this.dtls.recordSequenceNumber = 0;\n\n    const buf = this.cipher.encryptPacket(packet).serialize();\n    return buf;\n  }\n}\n\nconst handlers: {\n  [key: number]: (contexts: {\n    dtls: DtlsContext;\n    cipher: CipherContext;\n  }) => (message: any) => void;\n} = {};\n\nhandlers[HandshakeType.client_key_exchange_16] =\n  ({ cipher, dtls }) =>\n  (message: ClientKeyExchange) => {\n    cipher.remoteKeyPair = {\n      curve: cipher.namedCurve,\n      publicKey: message.publicKey,\n    };\n    if (\n      !cipher.remoteKeyPair.publicKey ||\n      !cipher.localKeyPair ||\n      !cipher.remoteRandom ||\n      !cipher.localRandom\n    )\n      throw new Error(\"not exist\");\n\n    const preMasterSecret = prfPreMasterSecret(\n      cipher.remoteKeyPair.publicKey,\n      cipher.localKeyPair.privateKey,\n      cipher.localKeyPair.curve\n    );\n\n    log(\n      dtls.sessionId,\n      \"extendedMasterSecret\",\n      dtls.options.extendedMasterSecret,\n      dtls.remoteExtendedMasterSecret\n    );\n\n    const handshakes = Buffer.concat(\n      dtls.sortedHandshakeCache.map((v) => v.serialize())\n    );\n    cipher.masterSecret =\n      dtls.options.extendedMasterSecret && dtls.remoteExtendedMasterSecret\n        ? prfExtendedMasterSecret(preMasterSecret, handshakes)\n        : prfMasterSecret(\n            preMasterSecret,\n            cipher.remoteRandom.serialize(),\n            cipher.localRandom.serialize()\n          );\n\n    cipher.cipher = createCipher(cipher.cipherSuite!);\n    cipher.cipher.init(\n      cipher.masterSecret,\n      cipher.localRandom.serialize(),\n      cipher.remoteRandom.serialize()\n    );\n    log(dtls.sessionId, \"setup cipher\", cipher.cipher.summary);\n  };\n\nhandlers[HandshakeType.finished_20] =\n  ({ dtls }) =>\n  (message: Finished) => {\n    log(dtls.sessionId, \"finished\", message);\n  };\n"]}
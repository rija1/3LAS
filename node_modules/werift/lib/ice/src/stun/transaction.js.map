{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../../ice/src/stun/transaction.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,qCAAgC;AAEhC,8CAAsE;AAEtE,mCAAwD;AAGxD,MAAM,GAAG,GAAG,IAAA,eAAK,EAAC,iDAAiD,CAAC,CAAC;AAErE,MAAa,WAAW;IAOtB,YACU,OAAgB,EAChB,IAAa,EACb,QAAkB,EAClB,eAAwB;;;;;mBAHxB;;;;;;mBACA;;;;;;mBACA;;;;;;mBACA;;QAVV;;;;mBAAuB,iBAAS;WAAC;QACjC;;;;;WAA4B;QAC5B;;;;mBAAgB,CAAC;WAAC;QAClB;;;;;WAAkC;QAClC;;;;mBAA8B,IAAI,eAAK,EAAsB;WAAC;QAY9D;;;;mBAAmB,CAAC,OAAgB,EAAE,IAAa,EAAE,EAAE;gBACrD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC9B,IAAI,OAAO,CAAC,YAAY,KAAK,eAAO,CAAC,QAAQ,EAAE;wBAC7C,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;wBACvC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;qBAC5B;yBAAM;wBACL,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,8BAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;qBAC7D;iBACF;YACH,CAAC;WAAC;QAEF;;;;mBAAM,KAAK,IAAI,EAAE;gBACf,IAAI;oBACF,IAAI,CAAC,KAAK,EAAE,CAAC;oBACb,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;iBAC1C;wBAAS;oBACR,IAAI,IAAI,CAAC,aAAa,EAAE;wBACtB,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;qBAClC;iBACF;YACH,CAAC;WAAC;QAEF;;;;mBAAgB,GAAG,EAAE;gBACnB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAC/B,GAAG,CAAC,sBAAsB,IAAI,CAAC,KAAK,aAAa,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAClE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,+BAAkB,EAAE,CAAC,CAAC;oBAChD,OAAO;iBACR;gBACD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChD,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC/D,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC;gBACvB,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,CAAC;WAAC;QApCA,IAAI,CAAC,QAAQ;YACX,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAS,CAAC,CAAC;IAClE,CAAC;IAoCD,MAAM;QACJ,IAAI,IAAI,CAAC,aAAa;YAAE,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3D,CAAC;CACF;AAtDD,kCAsDC","sourcesContent":["import debug from \"debug\";\nimport { Event } from \"rx.mini\";\n\nimport { TransactionFailed, TransactionTimeout } from \"../exceptions\";\nimport { Address, Protocol } from \"../types/model\";\nimport { classes, RETRY_MAX, RETRY_RTO } from \"./const\";\nimport { Message } from \"./message\";\n\nconst log = debug(\"werift-ice:packages/ice/src/stun/transaction.ts\");\n\nexport class Transaction {\n  private timeoutDelay = RETRY_RTO;\n  private timeoutHandle?: any;\n  private tries = 0;\n  private readonly triesMax: number;\n  private readonly onResponse = new Event<[Message, Address]>();\n\n  constructor(\n    private request: Message,\n    private addr: Address,\n    private protocol: Protocol,\n    private retransmissions?: number\n  ) {\n    this.triesMax =\n      1 + (this.retransmissions ? this.retransmissions : RETRY_MAX);\n  }\n\n  responseReceived = (message: Message, addr: Address) => {\n    if (this.onResponse.length > 0) {\n      if (message.messageClass === classes.RESPONSE) {\n        this.onResponse.execute(message, addr);\n        this.onResponse.complete();\n      } else {\n        this.onResponse.error(new TransactionFailed(message, addr));\n      }\n    }\n  };\n\n  run = async () => {\n    try {\n      this.retry();\n      return await this.onResponse.asPromise();\n    } finally {\n      if (this.timeoutHandle) {\n        clearTimeout(this.timeoutHandle);\n      }\n    }\n  };\n\n  private retry = () => {\n    if (this.tries >= this.triesMax) {\n      log(`retry failed times:${this.tries} maxLimit:${this.triesMax}`);\n      this.onResponse.error(new TransactionTimeout());\n      return;\n    }\n    this.protocol.sendStun(this.request, this.addr);\n    this.timeoutHandle = setTimeout(this.retry, this.timeoutDelay);\n    this.timeoutDelay *= 2;\n    this.tries++;\n  };\n\n  cancel() {\n    if (this.timeoutHandle) clearTimeout(this.timeoutHandle);\n  }\n}\n"]}
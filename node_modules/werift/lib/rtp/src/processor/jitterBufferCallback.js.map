{"version":3,"file":"jitterBufferCallback.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/jitterBufferCallback.ts"],"names":[],"mappings":";;;AAAA,iDAIwB;AAExB,MAAa,oBAAqB,SAAQ,+BAAgB;IAA1D;;QACE;;;;;WAAiD;QAEjD;;;;mBAAO,CAAC,EAAuC,EAAE,EAAE;gBACjD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAQ,CAAC,KAAwB,EAAE,EAAE;gBACnC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;oBACZ,OAAO;iBACR;gBACD,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBAC7C,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;iBACjB;gBACD,IAAI,KAAK,CAAC,GAAG,EAAE;oBACb,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC;iBACrB;YACH,CAAC;WAAC;IACJ,CAAC;CAAA;AAnBD,oDAmBC","sourcesContent":["import {\n  JitterBufferBase,\n  JitterBufferInput,\n  JitterBufferOutput,\n} from \"./jitterBuffer\";\n\nexport class JitterBufferCallback extends JitterBufferBase {\n  private cb?: (input: JitterBufferOutput) => void;\n\n  pipe = (cb: (input: JitterBufferOutput) => void) => {\n    this.cb = cb;\n    return this;\n  };\n\n  input = (input: JitterBufferInput) => {\n    if (!this.cb) {\n      return;\n    }\n    for (const output of this.processInput(input)) {\n      this.cb(output);\n    }\n    if (input.eol) {\n      this.cb = undefined;\n    }\n  };\n}\n"]}
/// <reference types="node" />
import Event from "rx.mini";
import { RtpHeader, RtpPacket } from "..";
import { Processor } from "./interface";
export type DepacketizerInput = {
    rtp?: RtpPacket;
    /**ms */
    time?: number;
    eol?: boolean;
};
export interface DepacketizerOutput {
    frame?: CodecFrame;
    eol?: boolean;
}
export interface CodecFrame {
    data: Buffer;
    isKeyframe: boolean;
    /**ms */
    time: number;
    [key: string]: any;
}
export interface DepacketizerOptions {
    isFinalPacketInSequence?: (header: RtpHeader) => boolean;
    waitForKeyframe?: boolean;
}
export declare class DepacketizeBase implements Processor<DepacketizerInput, DepacketizerOutput> {
    private codec;
    private options;
    private buffering;
    private lastSeqNum?;
    private frameBroken;
    private keyframeReceived;
    count: number;
    readonly onNeedKeyFrame: Event<any[]>;
    private internalStats;
    constructor(codec: string, options?: DepacketizerOptions);
    toJSON(): Record<string, any>;
    processInput(input: DepacketizerInput): DepacketizerOutput[];
    private stop;
    private clearBuffer;
    private checkFinalPacket;
}

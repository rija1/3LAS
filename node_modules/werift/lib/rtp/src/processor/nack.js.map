{"version":3,"file":"nack.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/nack.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport range from \"lodash/range\";\nimport Event from \"rx.mini\";\n\nimport { uint16Add } from \"../../../common/src\";\nimport { RtcpTransportLayerFeedback } from \"../rtcp/rtpfb\";\nimport { GenericNack } from \"../rtcp/rtpfb/nack\";\nimport { RtpPacket } from \"../rtp/rtp\";\nimport { Processor } from \"./interface\";\nimport { RtpOutput } from \"./source\";\n\nconst log = debug(\"werift-rtp : packages/rtp/src/processor/nack.ts\");\n\nconst LOST_SIZE = 30 * 5;\n\nexport type NackHandlerInput = RtpOutput;\n\nexport type NackHandlerOutput = RtpOutput;\n\nexport class NackHandlerBase\n  implements Processor<NackHandlerInput, NackHandlerOutput>\n{\n  private newEstSeqNum = 0;\n  private _lost: { [seqNum: number]: number } = {};\n  private nackLoop: any;\n  private internalStats = {};\n\n  readonly onPacketLost = new Event<[GenericNack]>();\n  mediaSourceSsrc?: number;\n  retryCount = 10;\n  stopped = false;\n\n  constructor(\n    private senderSsrc: number,\n    private onNack: (rtcp: RtcpTransportLayerFeedback) => Promise<void>\n  ) {}\n\n  toJSON(): Record<string, any> {\n    return {\n      newEstSeqNum: this.newEstSeqNum,\n      lostLength: Object.values(this._lost).length,\n      senderSsrc: this.senderSsrc,\n      mediaSourceSsrc: this.mediaSourceSsrc,\n      ...this.internalStats,\n    };\n  }\n\n  private get lostSeqNumbers() {\n    return Object.keys(this._lost).map(Number).sort();\n  }\n\n  private getLost(seq: number) {\n    return this._lost[seq];\n  }\n\n  private setLost(seq: number, count: number) {\n    this._lost[seq] = count;\n\n    if (this.nackLoop || this.stopped) {\n      return;\n    }\n    this.nackLoop = setInterval(async () => {\n      try {\n        await this.sendNack();\n        if (!Object.keys(this._lost).length) {\n          clearInterval(this.nackLoop);\n          this.nackLoop = undefined;\n        }\n      } catch (error) {\n        log(\"failed to send nack\", error);\n      }\n    }, 5);\n  }\n\n  private removeLost(sequenceNumber: number) {\n    delete this._lost[sequenceNumber];\n  }\n\n  processInput = (input: RtpOutput) => {\n    if (input.rtp) {\n      this.addPacket(input.rtp);\n      return [input];\n    }\n\n    this.stop();\n    return [input];\n  };\n\n  private addPacket(packet: RtpPacket) {\n    const { sequenceNumber, ssrc } = packet.header;\n    this.mediaSourceSsrc = ssrc;\n\n    if (this.newEstSeqNum === 0) {\n      this.newEstSeqNum = sequenceNumber;\n      return;\n    }\n\n    if (this.getLost(sequenceNumber)) {\n      // log(\"packetLoss resolved\", { sequenceNumber });\n      this.removeLost(sequenceNumber);\n      return;\n    }\n\n    if (sequenceNumber === uint16Add(this.newEstSeqNum, 1)) {\n      this.newEstSeqNum = sequenceNumber;\n    } else if (sequenceNumber > uint16Add(this.newEstSeqNum, 1)) {\n      // packet lost detected\n      range(uint16Add(this.newEstSeqNum, 1), sequenceNumber).forEach((seq) => {\n        this.setLost(seq, 1);\n      });\n      // this.receiver.sendRtcpPLI(this.mediaSourceSsrc);\n\n      this.newEstSeqNum = sequenceNumber;\n      this.pruneLost();\n    }\n  }\n\n  private pruneLost() {\n    if (this.lostSeqNumbers.length > LOST_SIZE) {\n      this._lost = Object.entries(this._lost)\n        .slice(-LOST_SIZE)\n        .reduce((acc, [key, v]) => {\n          acc[key] = v;\n          return acc;\n        }, {} as { [seqNum: number]: number });\n    }\n  }\n\n  private stop() {\n    this.stopped = true;\n    this._lost = {};\n    clearInterval(this.nackLoop);\n    this.onPacketLost.allUnsubscribe();\n    this.onNack = undefined as any;\n  }\n\n  private updateRetryCount() {\n    this.lostSeqNumbers.forEach((seq) => {\n      const count = this._lost[seq]++;\n      if (count > this.retryCount) {\n        this.removeLost(seq);\n        return seq;\n      }\n    });\n  }\n\n  private sendNack = () =>\n    new Promise((r, f) => {\n      if (this.lostSeqNumbers.length > 0 && this.mediaSourceSsrc) {\n        this.internalStats[\"count\"] = (this.internalStats[\"count\"] ?? 0) + 1;\n\n        const nack = new GenericNack({\n          senderSsrc: this.senderSsrc,\n          mediaSourceSsrc: this.mediaSourceSsrc,\n          lost: this.lostSeqNumbers,\n        });\n\n        const rtcp = new RtcpTransportLayerFeedback({\n          feedback: nack,\n        });\n        this.onNack(rtcp).then(r).catch(f);\n\n        this.updateRetryCount();\n        this.onPacketLost.execute(nack);\n      }\n    });\n}\n"]}
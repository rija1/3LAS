{"version":3,"file":"nackHandlerCallback.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/nackHandlerCallback.ts"],"names":[],"mappings":";;;AACA,iCAA8E;AAE9E,MAAa,mBAAoB,SAAQ,sBAAe;IAEtD,YACE,UAAkB,EAClB,MAA2D;QAE3D,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAL5B;;;;;WAAgD;QAQhD;;;;mBAAO,CAAC,EAAsC,EAAE,EAAE;gBAChD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAQ,CAAC,KAAuB,EAAE,EAAE;gBAClC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBAC7C,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;iBACjB;YACH,CAAC;WAAC;IAXF,CAAC;CAYF;AAnBD,kDAmBC","sourcesContent":["import { RtcpTransportLayerFeedback } from \"../rtcp/rtpfb\";\nimport { NackHandlerBase, NackHandlerInput, NackHandlerOutput } from \"./nack\";\n\nexport class NackHandlerCallback extends NackHandlerBase {\n  private cb!: (input: NackHandlerOutput) => void;\n  constructor(\n    senderSsrc: number,\n    onNack: (rtcp: RtcpTransportLayerFeedback) => Promise<void>\n  ) {\n    super(senderSsrc, onNack);\n  }\n\n  pipe = (cb: (input: NackHandlerOutput) => void) => {\n    this.cb = cb;\n    return this;\n  };\n\n  input = (input: NackHandlerInput) => {\n    for (const output of this.processInput(input)) {\n      this.cb(output);\n    }\n  };\n}\n"]}
import { Processor, RtcpPacket, RtpPacket } from "..";
export type NtpTimeInput = {
    rtp?: RtpPacket;
    eol?: boolean;
    rtcp?: RtcpPacket;
};
export interface NtpTimeOutput {
    rtp?: RtpPacket;
    /**ms */
    time?: number;
    eol?: boolean;
}
export declare class NtpTimeBase implements Processor<NtpTimeInput, NtpTimeOutput> {
    clockRate: number;
    baseNtpTimestamp?: bigint;
    baseRtpTimestamp?: number;
    latestNtpTimestamp?: bigint;
    latestRtpTimestamp?: number;
    private currentElapsed;
    buffer: RtpPacket[];
    private internalStats;
    id: string;
    payloadType: number;
    constructor(clockRate: number);
    toJSON(): Record<string, any>;
    private stop;
    processInput({ rtcp, rtp, eol }: NtpTimeInput): NtpTimeOutput[];
    /**
     *
     * @param rtpTimestamp
     * @returns sec
     */
    private calcNtp;
    private updateNtp;
}

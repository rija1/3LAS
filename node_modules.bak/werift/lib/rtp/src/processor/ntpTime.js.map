{"version":3,"file":"ntpTime.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/ntpTime.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomUUID } from \"crypto\";\n\nimport {\n  Max32Uint,\n  ntpTime2Sec,\n  Processor,\n  RtcpPacket,\n  RtcpSrPacket,\n  RtpPacket,\n} from \"..\";\n\nexport type NtpTimeInput = {\n  rtp?: RtpPacket;\n  eol?: boolean;\n  rtcp?: RtcpPacket;\n};\n\nexport interface NtpTimeOutput {\n  rtp?: RtpPacket;\n  /**ms */\n  time?: number;\n  eol?: boolean;\n}\n\nexport class NtpTimeBase implements Processor<NtpTimeInput, NtpTimeOutput> {\n  baseNtpTimestamp?: bigint;\n  baseRtpTimestamp?: number;\n  latestNtpTimestamp?: bigint;\n  latestRtpTimestamp?: number;\n  private currentElapsed = 0;\n  buffer: RtpPacket[] = [];\n  private internalStats = {};\n  id = randomUUID();\n  payloadType = 0;\n\n  constructor(public clockRate: number) {}\n\n  toJSON(): Record<string, any> {\n    return {\n      baseRtpTimestamp: this.baseRtpTimestamp,\n      latestRtpTimestamp: this.latestRtpTimestamp,\n      baseNtpTimestamp:\n        this.baseNtpTimestamp && ntpTime2Sec(this.baseNtpTimestamp),\n      latestNtpTimestamp:\n        this.latestNtpTimestamp && ntpTime2Sec(this.latestNtpTimestamp),\n      bufferLength: this.buffer.length,\n      currentElapsed: this.currentElapsed,\n      id: this.id,\n      clockRate: this.clockRate,\n      ...this.internalStats,\n    };\n  }\n\n  private stop() {\n    this.buffer = [];\n    this.internalStats = {};\n  }\n\n  processInput({ rtcp, rtp, eol }: NtpTimeInput): NtpTimeOutput[] {\n    if (eol) {\n      this.stop();\n      return [{ eol: true }];\n    }\n\n    if (rtcp && rtcp instanceof RtcpSrPacket) {\n      const { ntpTimestamp, rtpTimestamp } = rtcp.senderInfo;\n      this.latestNtpTimestamp = ntpTimestamp;\n      this.latestRtpTimestamp = rtpTimestamp;\n\n      if (this.baseNtpTimestamp == undefined) {\n        this.baseNtpTimestamp = ntpTimestamp;\n        this.baseRtpTimestamp = rtpTimestamp;\n      }\n    }\n\n    if (rtp) {\n      this.buffer.push(rtp);\n      this.payloadType = rtp.header.payloadType;\n\n      const res: NtpTimeOutput[] = [];\n\n      this.buffer = this.buffer\n        .map((rtp) => {\n          const ntp = this.updateNtp(rtp.header.timestamp);\n          if (ntp != undefined) {\n            const ms = ntp * 1000;\n            res.push({ rtp, time: Math.round(ms) });\n            return undefined;\n          }\n          return rtp;\n        })\n        .filter((r): r is NonNullable<typeof r> => r != undefined);\n      return res;\n    }\n\n    return [];\n  }\n\n  /**\n   *\n   * @param rtpTimestamp\n   * @returns sec\n   */\n  private calcNtp({\n    rtpTimestamp,\n    baseNtpTimestamp,\n    baseRtpTimestamp,\n    elapsedOffset,\n  }: {\n    rtpTimestamp: number;\n    baseRtpTimestamp: number;\n    baseNtpTimestamp: bigint;\n    elapsedOffset: number;\n  }) {\n    const rotate =\n      Math.abs(rtpTimestamp - baseRtpTimestamp) > (Max32Uint / 4) * 3;\n\n    const elapsed = rotate\n      ? rtpTimestamp + Max32Uint - baseRtpTimestamp\n      : rtpTimestamp - baseRtpTimestamp;\n    const elapsedSec = elapsed / this.clockRate;\n    this.internalStats[\"totalElapsed\"] =\n      (this.internalStats[\"totalElapsed\"] ?? 0) + elapsedSec;\n\n    // sec\n    const ntp = ntpTime2Sec(baseNtpTimestamp) + elapsedOffset + elapsedSec;\n    return { ntp, elapsedSec };\n  }\n\n  private updateNtp(rtpTimestamp: number) {\n    if (\n      this.baseRtpTimestamp == undefined ||\n      this.baseNtpTimestamp == undefined ||\n      this.latestNtpTimestamp == undefined ||\n      this.latestRtpTimestamp == undefined\n    ) {\n      return;\n    }\n\n    this.internalStats[\"inputRtp\"] = rtpTimestamp;\n\n    const base = this.calcNtp({\n      rtpTimestamp,\n      baseNtpTimestamp: this.baseNtpTimestamp,\n      baseRtpTimestamp: this.baseRtpTimestamp,\n      elapsedOffset: this.currentElapsed,\n    });\n    const latest = this.calcNtp({\n      rtpTimestamp,\n      baseNtpTimestamp: this.latestNtpTimestamp,\n      baseRtpTimestamp: this.latestRtpTimestamp,\n      elapsedOffset: 0,\n    });\n\n    this.internalStats[\"calcBaseNtp\"] = base.ntp;\n    this.internalStats[\"calcLatestNtp\"] = latest.ntp;\n\n    if (base.ntp < latest.ntp) {\n      // update baseNtp\n      this.baseNtpTimestamp = this.latestNtpTimestamp;\n      this.baseRtpTimestamp = this.latestRtpTimestamp;\n      this.currentElapsed = 0;\n      this.internalStats[\"calcNtp\"] = latest.ntp;\n      return latest.ntp;\n    } else {\n      this.currentElapsed += base.elapsedSec;\n      this.baseRtpTimestamp = rtpTimestamp;\n      this.internalStats[\"calcNtp\"] = base.ntp;\n      return base.ntp;\n    }\n  }\n}\n"]}
{"version":3,"file":"dtxCallback.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/dtxCallback.ts"],"names":[],"mappings":";;;AAAA,+BAAqD;AAErD,MAAa,WAAY,SAAQ,aAAO;IAAxC;;QACE;;;;;WAAwC;QAExC;;;;mBAAO,CAAC,EAA8B,EAAE,EAAE;gBACxC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAQ,CAAC,KAAe,EAAE,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;oBACZ,OAAO;iBACR;gBACD,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBAC7C,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;iBACjB;gBACD,IAAI,KAAK,CAAC,GAAG,EAAE;oBACb,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC;iBACrB;YACH,CAAC;WAAC;IACJ,CAAC;CAAA;AAnBD,kCAmBC","sourcesContent":["import { DtxBase, DtxInput, DtxOutput } from \"./dtx\";\n\nexport class DtxCallback extends DtxBase {\n  private cb?: (input: DtxOutput) => void;\n\n  pipe = (cb: (input: DtxOutput) => void) => {\n    this.cb = cb;\n    return this;\n  };\n\n  input = (input: DtxInput) => {\n    if (!this.cb) {\n      return;\n    }\n    for (const output of this.processInput(input)) {\n      this.cb(output);\n    }\n    if (input.eol) {\n      this.cb = undefined;\n    }\n  };\n}\n"]}
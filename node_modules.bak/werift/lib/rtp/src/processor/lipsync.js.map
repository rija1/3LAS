{"version":3,"file":"lipsync.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/lipsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { int } from \"../../../common/src\";\nimport { CodecFrame } from \"./depacketizer\";\nimport { AVProcessor } from \"./interface\";\n\nexport type LipsyncInput = {\n  frame?: CodecFrame;\n  eol?: boolean;\n};\n\nexport type LipsyncOutput = {\n  frame?: CodecFrame;\n  eol?: boolean;\n};\n\nexport class LipsyncBase implements AVProcessor<LipsyncInput> {\n  bufferLength: number;\n  /**ms */\n  baseTime?: number;\n  audioBuffer: { frame: CodecFrame; kind: string }[][];\n  videoBuffer: { frame: CodecFrame; kind: string }[][];\n  stopped = false;\n  /**ms */\n  private interval: number;\n  private started = false;\n  /**ms */\n  lastCommittedTime = 0;\n  private intervalId?: any;\n  private internalStats = {};\n\n  constructor(\n    private audioOutput: (output: LipsyncOutput) => void,\n    private videoOutput: (output: LipsyncOutput) => void,\n    private options: Partial<LipSyncOptions> = {}\n  ) {\n    this.interval = this.options.syncInterval ?? 500;\n    this.bufferLength = this.options.bufferingTimes ?? 10;\n    this.audioBuffer = [...new Array(this.bufferLength)].map(() => []);\n    this.videoBuffer = [...new Array(this.bufferLength)].map(() => []);\n  }\n\n  toJSON(): Record<string, any> {\n    return {\n      audioBufferLength: this.audioBuffer.flatMap((v) => v).length,\n      videoBufferLength: this.videoBuffer.flatMap((v) => v).length,\n      baseTime: this.baseTime,\n      lastCommittedTimeSec: this.lastCommittedTime / 1000,\n      ...this.internalStats,\n    };\n  }\n\n  private startIfNeed() {\n    // 2列目にカーソルが移ってから処理を始めることで1列目の処理を完了できる\n    if ([...this.audioBuffer[1], ...this.videoBuffer[1]].length === 0) {\n      return;\n    }\n\n    if (this.started) {\n      return;\n    }\n    this.started = true;\n\n    let index = 0;\n    let currentTimestamp = this.baseTime!;\n    const task = () => {\n      const audioBuffer = this.audioBuffer[index].sort(\n        (a, b) => a.frame.time - b.frame.time\n      );\n\n      if (this.options.fillDummyAudioPacket) {\n        const last = audioBuffer.at(-1);\n        const expect = last ? last.frame.time + 20 : currentTimestamp;\n\n        // パケット間の損失/muteはdtxプラグインでダミーパケットを挿入する\n        // interval中のパケットが途中から無いもしくはinterval中にパケットが無い場合はここでダミーパケットを挿入する\n        if (expect < currentTimestamp + this.interval) {\n          for (\n            let time = expect;\n            time < currentTimestamp + this.interval;\n            time += 20\n          ) {\n            audioBuffer.push({\n              frame: {\n                time,\n                data: this.options.fillDummyAudioPacket,\n                isKeyframe: true,\n              },\n              kind: \"audio\",\n            });\n            this.internalStats[\"pushDummyPacket\"] = {\n              count: (this.internalStats[\"pushDummyPacket\"]?.count ?? 0) + 1,\n              at: new Date().toISOString(),\n              time,\n            };\n          }\n        }\n        currentTimestamp += this.interval;\n      }\n      const joined = [...audioBuffer, ...this.videoBuffer[index]].filter(\n        (b) => b.frame.time >= this.lastCommittedTime\n      );\n      const sorted = joined.sort((a, b) => a.frame.time - b.frame.time);\n      this.audioBuffer[index] = [];\n      this.videoBuffer[index] = [];\n\n      for (const output of sorted) {\n        if (output.kind === \"audio\") {\n          this.audioOutput(output);\n        } else {\n          this.videoOutput(output);\n        }\n        this.lastCommittedTime = output.frame.time;\n      }\n\n      index++;\n      if (index === this.bufferLength) {\n        index = 0;\n      }\n    };\n    this.intervalId = setInterval(task, this.interval);\n  }\n\n  private stop() {\n    this.stopped = true;\n    clearInterval(this.intervalId);\n    this.audioBuffer = [];\n    this.videoBuffer = [];\n  }\n\n  processAudioInput = ({ frame, eol }: LipsyncInput) => {\n    if (!frame) {\n      this.audioOutput({ eol });\n      this.stop();\n      this.audioOutput = undefined as any;\n      return;\n    }\n    if (this.stopped) {\n      return;\n    }\n\n    if (this.baseTime == undefined) {\n      this.baseTime = frame.time;\n    }\n\n    /**ms */\n    const elapsed = frame.time - this.baseTime!;\n    if (elapsed < 0 || frame.time < this.lastCommittedTime) {\n      return;\n    }\n    const index = int(elapsed / this.interval) % this.bufferLength;\n    this.audioBuffer[index].push({\n      frame,\n      kind: \"audio\",\n    });\n\n    this.startIfNeed();\n  };\n\n  processVideoInput = ({ frame, eol }: LipsyncInput) => {\n    if (!frame) {\n      this.videoOutput({ eol });\n      this.stop();\n      this.videoOutput = undefined as any;\n      return;\n    }\n    if (this.stopped) {\n      return;\n    }\n\n    if (this.baseTime == undefined) {\n      this.baseTime = frame.time;\n    }\n\n    /**ms */\n    const elapsed = frame.time - this.baseTime!;\n    if (elapsed < 0 || frame.time < this.lastCommittedTime) {\n      return;\n    }\n    const index = int(elapsed / this.interval) % this.bufferLength;\n    this.videoBuffer[index].push({\n      frame,\n      kind: \"video\",\n    });\n\n    this.startIfNeed();\n  };\n}\n\nexport interface LipSyncOptions {\n  /**ms */\n  syncInterval: number;\n  /**\n   * int\n   * @description syncInterval * bufferingTimes=bufferTimeLength\n   * */\n  bufferingTimes: number;\n  fillDummyAudioPacket: Buffer;\n}\n"]}
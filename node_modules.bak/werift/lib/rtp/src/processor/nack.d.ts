import Event from "rx.mini";
import { RtcpTransportLayerFeedback } from "../rtcp/rtpfb";
import { GenericNack } from "../rtcp/rtpfb/nack";
import { Processor } from "./interface";
import { RtpOutput } from "./source";
export type NackHandlerInput = RtpOutput;
export type NackHandlerOutput = RtpOutput;
export declare class NackHandlerBase implements Processor<NackHandlerInput, NackHandlerOutput> {
    private senderSsrc;
    private onNack;
    private newEstSeqNum;
    private _lost;
    private nackLoop;
    private internalStats;
    readonly onPacketLost: Event<[GenericNack]>;
    mediaSourceSsrc?: number;
    retryCount: number;
    stopped: boolean;
    constructor(senderSsrc: number, onNack: (rtcp: RtcpTransportLayerFeedback) => Promise<void>);
    toJSON(): Record<string, any>;
    private get lostSeqNumbers();
    private getLost;
    private setLost;
    private removeLost;
    processInput: (input: RtpOutput) => RtpOutput[];
    private addPacket;
    private pruneLost;
    private stop;
    private updateRetryCount;
    private sendNack;
}

{"version":3,"file":"jitterBufferTransformer.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/jitterBufferTransformer.ts"],"names":[],"mappings":";;;AAAA,oCAA6C;AAE7C,iDAKwB;AAEjB,MAAM,uBAAuB,GAAG,CACrC,GAAG,IAA2D,EAC9D,EAAE,CAAC,IAAI,uBAAuB,CAAC,GAAG,IAAI,CAAC,CAAC,SAAS,CAAC;AAFvC,QAAA,uBAAuB,2BAEgB;AAEpD,MAAa,uBAAwB,SAAQ,+BAAgB;IAG3D,YACS,SAAiB,EACxB,UAAwC,EAAE;QAE1C,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;;;;;mBAHnB;;QAHT;;;;;WAAkE;QAQhE,IAAI,CAAC,SAAS,GAAG,IAAI,qBAAe,CAAC;YACnC,SAAS,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;gBAC3B,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBAC1C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;iBACrB;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAjBD,0DAiBC","sourcesContent":["import { TransformStream } from \"stream/web\";\n\nimport {\n  JitterBufferBase,\n  JitterBufferInput,\n  JitterBufferOptions,\n  JitterBufferOutput,\n} from \"./jitterBuffer\";\n\nexport const jitterBufferTransformer = (\n  ...args: ConstructorParameters<typeof JitterBufferTransformer>\n) => new JitterBufferTransformer(...args).transform;\n\nexport class JitterBufferTransformer extends JitterBufferBase {\n  transform: TransformStream<JitterBufferInput, JitterBufferOutput>;\n\n  constructor(\n    public clockRate: number,\n    options: Partial<JitterBufferOptions> = {}\n  ) {\n    super(clockRate, options);\n\n    this.transform = new TransformStream({\n      transform: (input, output) => {\n        for (const res of this.processInput(input)) {\n          output.enqueue(res);\n        }\n      },\n    });\n  }\n}\n"]}
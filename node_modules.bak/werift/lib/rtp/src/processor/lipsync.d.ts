/// <reference types="node" />
import { CodecFrame } from "./depacketizer";
import { AVProcessor } from "./interface";
export type LipsyncInput = {
    frame?: CodecFrame;
    eol?: boolean;
};
export type LipsyncOutput = {
    frame?: CodecFrame;
    eol?: boolean;
};
export declare class LipsyncBase implements AVProcessor<LipsyncInput> {
    private audioOutput;
    private videoOutput;
    private options;
    bufferLength: number;
    /**ms */
    baseTime?: number;
    audioBuffer: {
        frame: CodecFrame;
        kind: string;
    }[][];
    videoBuffer: {
        frame: CodecFrame;
        kind: string;
    }[][];
    stopped: boolean;
    /**ms */
    private interval;
    private started;
    /**ms */
    lastCommittedTime: number;
    private intervalId?;
    private internalStats;
    constructor(audioOutput: (output: LipsyncOutput) => void, videoOutput: (output: LipsyncOutput) => void, options?: Partial<LipSyncOptions>);
    toJSON(): Record<string, any>;
    private startIfNeed;
    private stop;
    processAudioInput: ({ frame, eol }: LipsyncInput) => void;
    processVideoInput: ({ frame, eol }: LipsyncInput) => void;
}
export interface LipSyncOptions {
    /**ms */
    syncInterval: number;
    /**
     * int
     * @description syncInterval * bufferingTimes=bufferTimeLength
     * */
    bufferingTimes: number;
    fillDummyAudioPacket: Buffer;
}

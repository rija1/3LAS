{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/nonstandard/recorder/index.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA4B;AAI5B,wCAA4C;AAE5C,MAAa,aAAa;IAOxB,YACS,IAAY,EACZ,cAAc,CAAC,EACf,UAAyC,EAAE;;;;;mBAF3C;;;;;;mBACA;;;;;;mBACA;;QATT;;;;;WAAoB;QACpB;;;;;WAAY;QACZ;;;;mBAA6B,EAAE;WAAC;QAChC;;;;mBAAU,KAAK;WAAC;QAChB;;;;mBAAU,IAAI,iBAAK,EAAW;WAAC;QAO7B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE;YAClB,QAAQ,IAAI,CAAC,GAAG,EAAE;gBAChB,KAAK,MAAM;oBACT,OAAO,IAAI,kBAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACxC;oBACE,MAAM,IAAI,KAAK,EAAE,CAAC;aACrB;QACH,CAAC,CAAC,EAAE,CAAC;QAEL,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC;QAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,WAAW,EAAE;YACtC,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC3B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,KAAuB;QACpC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAEO,KAAK,CAAC,KAAK;QACjB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,EAAE;YACrE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtC;IACH,CAAC;IAED,KAAK,CAAC,IAAI;QACR,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;CACF;AA7CD,sCA6CC","sourcesContent":["import Event from \"rx.mini\";\n\nimport { MediaStreamTrack } from \"../../media/track\";\nimport { MediaWriter } from \"./writer\";\nimport { WebmFactory } from \"./writer/webm\";\n\nexport class MediaRecorder {\n  writer: MediaWriter;\n  ext: string;\n  tracks: MediaStreamTrack[] = [];\n  started = false;\n  onError = new Event<[Error]>();\n\n  constructor(\n    public path: string,\n    public numOfTracks = 1,\n    public options: Partial<MediaRecorderOptions> = {}\n  ) {\n    this.ext = path.split(\".\").slice(-1)[0];\n    this.writer = (() => {\n      switch (this.ext) {\n        case \"webm\":\n          return new WebmFactory(path, options);\n        default:\n          throw new Error();\n      }\n    })();\n\n    this.tracks = options.tracks ?? this.tracks;\n    if (this.tracks.length === numOfTracks) {\n      this.start().catch((error) => {\n        this.onError.execute(error);\n      });\n    }\n  }\n\n  async addTrack(track: MediaStreamTrack) {\n    this.tracks.push(track);\n    await this.start();\n  }\n\n  private async start() {\n    if (this.tracks.length === this.numOfTracks && this.started === false) {\n      this.started = true;\n      await this.writer.start(this.tracks);\n    }\n  }\n\n  async stop() {\n    await this.writer.stop();\n  }\n}\n\nexport interface MediaRecorderOptions {\n  width: number;\n  height: number;\n  jitterBufferLatency: number;\n  jitterBufferSize: number;\n  waitForKeyframe: boolean;\n  defaultDuration: number;\n  tracks: MediaStreamTrack[];\n}\n"]}
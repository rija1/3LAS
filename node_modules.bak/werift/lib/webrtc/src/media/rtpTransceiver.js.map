{"version":3,"file":"rtpTransceiver.js","sourceRoot":"","sources":["../../../../src/media/rtpTransceiver.ts"],"names":[],"mappings":"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","sourcesContent":["import Event from \"rx.mini\";\nimport * as uuid from \"uuid\";\n\nimport { RTCDtlsTransport } from \"..\";\nimport { SenderDirections } from \"../const\";\nimport { Kind } from \"../types/domain\";\nimport {\n  RTCRtpCodecParameters,\n  RTCRtpHeaderExtensionParameters,\n} from \"./parameters\";\nimport { RTCRtpReceiver } from \"./rtpReceiver\";\nimport { RTCRtpSender } from \"./rtpSender\";\nimport { MediaStreamTrack } from \"./track\";\n\nexport class RTCRtpTransceiver {\n  readonly id = uuid.v4();\n  readonly onTrack = new Event<[MediaStreamTrack, RTCRtpTransceiver]>();\n  mid?: string;\n  mLineIndex?: number;\n  /**should not be reused because it has been used for sending before. */\n  usedForSender = false;\n  private _currentDirection?: Direction;\n  offerDirection!: Direction;\n  _codecs: RTCRtpCodecParameters[] = [];\n  set codecs(codecs: RTCRtpCodecParameters[]) {\n    this._codecs = codecs;\n  }\n  get codecs() {\n    return this._codecs;\n  }\n  headerExtensions: RTCRtpHeaderExtensionParameters[] = [];\n  options: Partial<TransceiverOptions> = {};\n  stopping = false;\n  stopped = false;\n\n  constructor(\n    public readonly kind: Kind,\n    dtlsTransport: RTCDtlsTransport,\n    public receiver: RTCRtpReceiver,\n    public sender: RTCRtpSender,\n    /**RFC 8829 4.2.4.  direction the transceiver was initialized with */\n    private _direction: Direction\n  ) {\n    this.setDtlsTransport(dtlsTransport);\n  }\n\n  get dtlsTransport() {\n    return this.receiver.dtlsTransport;\n  }\n\n  /**RFC 8829 4.2.4. setDirectionに渡された最後の値を示します */\n  get direction() {\n    return this._direction;\n  }\n\n  setDirection(direction: Direction) {\n    this._direction = direction;\n    if (SenderDirections.includes(this._currentDirection ?? \"\")) {\n      this.usedForSender = true;\n    }\n  }\n\n  /**RFC 8829 4.2.5. last negotiated direction */\n  get currentDirection(): Direction | undefined {\n    return this._currentDirection;\n  }\n\n  setCurrentDirection(direction: Direction | undefined) {\n    this._currentDirection = direction;\n  }\n\n  setDtlsTransport(dtls: RTCDtlsTransport) {\n    this.receiver.setDtlsTransport(dtls);\n    this.sender.setDtlsTransport(dtls);\n  }\n\n  get msid() {\n    return `${this.sender.streamId} ${this.sender.trackId}`;\n  }\n\n  addTrack(track: MediaStreamTrack) {\n    const res = this.receiver.addTrack(track);\n    if (res) {\n      this.onTrack.execute(track, this);\n    }\n  }\n\n  // todo impl\n  // https://www.w3.org/TR/webrtc/#methods-8\n  stop() {\n    if (this.stopping) {\n      return;\n    }\n\n    // todo Stop sending and receiving with transceiver.\n\n    this.stopping = true;\n  }\n\n  getPayloadType(mimeType: string) {\n    return this.codecs.find((codec) =>\n      codec.mimeType.toLowerCase().includes(mimeType.toLowerCase())\n    )?.payloadType;\n  }\n}\n\nexport const Inactive = \"inactive\";\nexport const Sendonly = \"sendonly\";\nexport const Recvonly = \"recvonly\";\nexport const Sendrecv = \"sendrecv\";\n\nexport const Directions = [Inactive, Sendonly, Recvonly, Sendrecv] as const;\n\nexport type Direction = typeof Directions[number];\n\ntype SimulcastDirection = \"send\" | \"recv\";\n\nexport interface TransceiverOptions {\n  direction: Direction;\n  simulcast: { direction: SimulcastDirection; rid: string }[];\n}\n"]}
{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../../../../../ice/src/turn/protocol.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from \"crypto\";\nimport debug from \"debug\";\nimport { jspack } from \"jspack\";\nimport PCancelable from \"p-cancelable\";\nimport Event from \"rx.mini\";\nimport { setTimeout } from \"timers/promises\";\n\nimport { InterfaceAddresses } from \"../../../common/src/network\";\nimport { Candidate } from \"../candidate\";\nimport { TransactionFailed } from \"../exceptions\";\nimport { Future, future } from \"../helper\";\nimport { Connection } from \"../ice\";\nimport { classes, methods } from \"../stun/const\";\nimport { Message, parseMessage } from \"../stun/message\";\nimport { Transaction } from \"../stun/transaction\";\nimport { Transport, UdpTransport } from \"../transport\";\nimport { Address, Protocol } from \"../types/model\";\n\nconst log = debug(\"werift-ice:packages/ice/src/turn/protocol.ts\");\n\nconst TCP_TRANSPORT = 0x06000000;\nconst UDP_TRANSPORT = 0x11000000;\n\nclass TurnTransport implements Protocol {\n  readonly type = \"turn\";\n  localCandidate!: Candidate;\n  receiver?: Connection;\n\n  constructor(public turn: TurnClient) {\n    turn.onDatagramReceived = this.datagramReceived;\n  }\n\n  private datagramReceived = (data: Buffer, addr: Address) => {\n    const message = parseMessage(data);\n    if (!message) {\n      this.receiver?.dataReceived(data, this.localCandidate.component);\n      return;\n    }\n\n    if (\n      (message?.messageClass === classes.RESPONSE ||\n        message?.messageClass === classes.ERROR) &&\n      this.turn.transactions[message.transactionIdHex]\n    ) {\n      const transaction = this.turn.transactions[message.transactionIdHex];\n      transaction.responseReceived(message, addr);\n    } else if (message?.messageClass === classes.REQUEST) {\n      this.receiver?.requestReceived(message, addr, this, data);\n    }\n  };\n\n  async request(request: Message, addr: Address, integrityKey?: Buffer) {\n    if (this.turn.transactions[request.transactionIdHex])\n      throw new Error(\"exist\");\n\n    if (integrityKey) {\n      request.addMessageIntegrity(integrityKey);\n      request.addFingerprint();\n    }\n\n    const transaction = new Transaction(request, addr, this);\n    this.turn.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } finally {\n      delete this.turn.transactions[request.transactionIdHex];\n    }\n  }\n  async connectionMade() {}\n  async sendData(data: Buffer, addr: Address) {\n    await this.turn.sendData(data, addr);\n  }\n  async sendStun(message: Message, addr: Address) {\n    await this.turn.sendData(message.bytes, addr);\n  }\n}\n\nclass TurnClient implements Protocol {\n  type = \"inner_turn\";\n  readonly onData = new Event<[Buffer, Address]>();\n  transactions: { [hexId: string]: Transaction } = {};\n  integrityKey?: Buffer;\n  nonce?: Buffer;\n  realm?: string;\n  relayedAddress!: Address;\n  mappedAddress!: Address;\n  refreshHandle?: Future;\n  channelNumber = 0x4000;\n  channel?: { number: number; address: Address };\n  localCandidate!: Candidate;\n\n  onDatagramReceived: (data: Buffer, addr: Address) => void = () => {};\n\n  private channelBinding?: Promise<void>;\n\n  constructor(\n    public server: Address,\n    public username: string,\n    public password: string,\n    public lifetime: number,\n    public transport: Transport\n  ) {}\n\n  async connectionMade() {\n    this.transport.onData = (data, addr) => {\n      this.datagramReceived(data, addr);\n    };\n  }\n\n  private handleChannelData(data: Buffer) {\n    const [, length] = jspack.Unpack(\"!HH\", data.slice(0, 4));\n\n    if (this.channel?.address) {\n      const payload = data.slice(4, 4 + length);\n      this.onDatagramReceived(payload, this.channel.address);\n    }\n  }\n\n  private handleSTUNMessage(data: Buffer, addr: Address) {\n    try {\n      const message = parseMessage(data);\n      if (!message) throw new Error(\"not stun message\");\n      if (\n        message.messageClass === classes.RESPONSE ||\n        message.messageClass === classes.ERROR\n      ) {\n        const transaction = this.transactions[message.transactionIdHex];\n        if (transaction) transaction.responseReceived(message, addr);\n      } else if (message.messageClass === classes.REQUEST) {\n        this.onDatagramReceived(data, addr);\n      }\n\n      if (message.getAttributeValue(\"DATA\")) {\n        const buf: Buffer = message.getAttributeValue(\"DATA\");\n        this.onDatagramReceived(buf, addr);\n      }\n    } catch (error) {\n      log(\"parse error\", data.toString());\n    }\n  }\n\n  private datagramReceived(data: Buffer, addr: Address) {\n    if (data.length >= 4 && isChannelData(data)) {\n      this.handleChannelData(data);\n    } else {\n      this.handleSTUNMessage(data, addr);\n    }\n  }\n\n  async connect() {\n    const withoutCred = new Message(methods.ALLOCATE, classes.REQUEST);\n    withoutCred\n      .setAttribute(\"LIFETIME\", this.lifetime)\n      .setAttribute(\"REQUESTED-TRANSPORT\", UDP_TRANSPORT);\n\n    const err: TransactionFailed = await this.request(\n      withoutCred,\n      this.server\n    ).catch((e) => e);\n\n    // resolve dns address\n    this.server = err.addr;\n\n    if (err.response.getAttributeValue(\"NONCE\")) {\n      this.nonce = err.response.getAttributeValue(\"NONCE\");\n    }\n    if (err.response.getAttributeValue(\"REALM\")) {\n      this.realm = err.response.getAttributeValue(\"REALM\");\n    }\n    this.integrityKey = makeIntegrityKey(\n      this.username,\n      this.realm!,\n      this.password\n    );\n\n    const request = new Message(methods.ALLOCATE, classes.REQUEST);\n    request.setAttribute(\"REQUESTED-TRANSPORT\", UDP_TRANSPORT);\n\n    const [response] = await this.request(request, this.server);\n    this.relayedAddress = response.getAttributeValue(\"XOR-RELAYED-ADDRESS\");\n    this.mappedAddress = response.getAttributeValue(\"XOR-MAPPED-ADDRESS\");\n\n    this.refreshHandle = future(this.refresh());\n  }\n\n  async createPermission(peerAddress: Address) {\n    const request = new Message(methods.CREATE_PERMISSION, classes.REQUEST);\n    request\n      .setAttribute(\"XOR-PEER-ADDRESS\", peerAddress)\n      .setAttribute(\"USERNAME\", this.username)\n      .setAttribute(\"REALM\", this.realm)\n      .setAttribute(\"NONCE\", this.nonce);\n    const [response] = await this.request(request, this.server).catch((e) => {\n      request;\n      throw e;\n    });\n    return response;\n  }\n\n  refresh = () =>\n    new PCancelable(async (r, f, onCancel) => {\n      let run = true;\n      onCancel(() => {\n        run = false;\n        f(\"cancel\");\n      });\n\n      while (run) {\n        // refresh before expire\n        await setTimeout((5 / 6) * this.lifetime * 1000);\n\n        const request = new Message(methods.REFRESH, classes.REQUEST);\n        request.setAttribute(\"LIFETIME\", this.lifetime);\n\n        await this.request(request, this.server);\n      }\n    });\n\n  async request(request: Message, addr: Address): Promise<[Message, Address]> {\n    if (this.transactions[request.transactionIdHex]) {\n      throw new Error(\"exist\");\n    }\n    if (this.integrityKey) {\n      request\n        .setAttribute(\"USERNAME\", this.username)\n        .setAttribute(\"REALM\", this.realm)\n        .setAttribute(\"NONCE\", this.nonce)\n        .addMessageIntegrity(this.integrityKey)\n        .addFingerprint();\n    }\n\n    const transaction = new Transaction(request, addr, this);\n    this.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } finally {\n      delete this.transactions[request.transactionIdHex];\n    }\n  }\n\n  async sendData(data: Buffer, addr: Address) {\n    const channel = await this.getChannel(addr);\n\n    const header = jspack.Pack(\"!HH\", [channel.number, data.length]);\n    this.transport.send(\n      Buffer.concat([Buffer.from(header), data]),\n      this.server\n    );\n  }\n\n  private async getChannel(addr: Address) {\n    if (this.channelBinding) {\n      await this.channelBinding;\n    }\n    if (!this.channel) {\n      this.channel = { number: this.channelNumber++, address: addr };\n\n      this.channelBinding = this.channelBind(this.channel.number, addr);\n      await this.channelBinding;\n      this.channelBinding = undefined;\n      log(\"channelBind\", this.channel);\n    }\n    return this.channel;\n  }\n\n  private async channelBind(channelNumber: number, addr: Address) {\n    const request = new Message(methods.CHANNEL_BIND, classes.REQUEST);\n    request\n      .setAttribute(\"CHANNEL-NUMBER\", channelNumber)\n      .setAttribute(\"XOR-PEER-ADDRESS\", addr);\n    const [response] = await this.request(request, this.server);\n    if (response.messageMethod !== methods.CHANNEL_BIND) {\n      throw new Error();\n    }\n  }\n\n  sendStun(message: Message, addr: Address) {\n    this.transport.send(message.bytes, addr);\n  }\n}\n\nexport async function createTurnEndpoint(\n  serverAddr: Address,\n  username: string,\n  password: string,\n  {\n    lifetime,\n    portRange,\n    interfaceAddresses,\n  }: {\n    lifetime?: number;\n    ssl?: boolean;\n    transport?: \"udp\";\n    portRange?: [number, number];\n    interfaceAddresses?: InterfaceAddresses;\n  }\n) {\n  if (lifetime == undefined) {\n    lifetime = 600;\n  }\n\n  const transport = await UdpTransport.init(\n    \"udp4\",\n    portRange,\n    interfaceAddresses\n  );\n\n  const turnClient = new TurnClient(\n    serverAddr,\n    username,\n    password,\n    lifetime,\n    transport\n  );\n\n  await turnClient.connectionMade();\n  await turnClient.connect();\n  const turnTransport = new TurnTransport(turnClient);\n\n  return turnTransport;\n}\n\nexport function makeIntegrityKey(\n  username: string,\n  realm: string,\n  password: string\n) {\n  return createHash(\"md5\")\n    .update(Buffer.from([username, realm, password].join(\":\")))\n    .digest();\n}\n\nfunction isChannelData(data: Buffer) {\n  return (data[0] & 0xc0) == 0x40;\n}\n"]}
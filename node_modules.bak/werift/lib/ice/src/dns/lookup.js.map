{"version":3,"file":"lookup.js","sourceRoot":"","sources":["../../../../../ice/src/dns/lookup.ts"],"names":[],"mappings":"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","sourcesContent":["import worker_thread from \"worker_threads\";\n\ninterface DnsLookupRequest {\n  host: string;\n}\n\ninterface DnsLookupResult extends DnsLookupRequest {\n  err?: string;\n  address?: string;\n  family?: number;\n}\n\nexport class DnsLookup {\n  thread: worker_thread.Worker;\n  cache = new Map<string, Promise<string>>();\n\n  constructor() {\n    const lookupWorkerFunction = () => {\n      const worker_thread = global.require(\"worker_threads\");\n      const { lookup } = global.require(\"dns\");\n\n      const dnsLookup = (host: string) =>\n        lookup(host, (err: Error, address: string, family: number) => {\n          const res: DnsLookupResult = {\n            err: err?.message,\n            address,\n            family,\n            host,\n          };\n          worker_thread.parentPort?.postMessage(res);\n          process.exit();\n        });\n\n      worker_thread.parentPort?.on(\"message\", (message: DnsLookupRequest) => {\n        const { host } = message;\n        dnsLookup(host);\n      });\n    };\n\n    const lookupEval = `(${lookupWorkerFunction})()`;\n\n    this.thread = new worker_thread.Worker(lookupEval, {\n      eval: true,\n    });\n\n    this.thread.setMaxListeners(100);\n  }\n\n  async lookup(host: string): Promise<string> {\n    let cached = this.cache.get(host);\n    if (cached) {\n      return cached;\n    }\n    cached = new Promise((r, f) => {\n      const exitListener = (exitCode: number) =>\n        f(new Error(`dns.lookup thread exited unexpectedly: ${exitCode}`));\n\n      const threadMessageListener = (result: DnsLookupResult) => {\n        if (result.host !== host) {\n          return;\n        }\n\n        this.thread.removeListener(\"message\", threadMessageListener);\n        this.thread.removeListener(\"exit\", exitListener);\n\n        if (!result.address)\n          return f(new Error(result.err || \"dns.lookup thread unknown error\"));\n        r(result.address);\n      };\n\n      this.thread.on(\"message\", threadMessageListener);\n      this.thread.on(\"exit\", exitListener);\n\n      this.thread.postMessage({\n        host,\n      } as DnsLookupRequest);\n    });\n\n    this.cache.set(host, cached);\n    return cached;\n  }\n\n  close() {\n    return this.thread.terminate();\n  }\n}\n"]}
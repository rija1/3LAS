{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../ice/src/utils.ts"],"names":[],"mappings":";;;AACA,+BAA6D;AAC7D,8CAA+C;AAGxC,KAAK,UAAU,WAAW,CAC/B,UAAoB,EACpB,kBAAuC;IAEvC,MAAM,UAAU,GAAG,IAAI,gBAAU,CAAC,IAAI,EAAE;QACtC,UAAU,EAAE,UAAU,IAAI,CAAC,mBAAmB,EAAE,KAAK,CAAC;KACvD,CAAC,CAAC;IACH,MAAM,UAAU,CAAC,gBAAgB,EAAE,CAAC;IAEpC,MAAM,QAAQ,GAAG,IAAI,uBAAY,CAAC,UAAU,CAAC,CAAC;IAC9C,QAAQ,CAAC,cAAc,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACxD,MAAM,QAAQ,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC;IACnE,MAAM,SAAS,GAAG,MAAM,IAAA,8BAAwB,EAAC,QAAQ,EAAE;QACzD,mBAAmB;QACnB,KAAK;KACN,CAAC,CAAC;IAEH,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;IACzB,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;IAEvB,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;KACnC;IAED,OAAO,SAAS,EAAE,IAAI,CAAC;AACzB,CAAC;AAzBD,kCAyBC;AAED,SAAgB,sBAAsB,CAAC,MAAuB;IAC5D,IAAI,MAAM,KAAK,MAAM;QAAE,OAAO,CAAC,CAAC;IAChC,IAAI,MAAM,KAAK,MAAM;QAAE,OAAO,CAAC,CAAC;IAEhC,OAAO,MAAe,CAAC;AACzB,CAAC;AALD,wDAKC","sourcesContent":["import { InterfaceAddresses } from \"../../common/src/network\";\nimport { Connection, serverReflexiveCandidate } from \"./ice\";\nimport { StunProtocol } from \"./stun/protocol\";\nimport { Address } from \"./types/model\";\n\nexport async function getGlobalIp(\n  stunServer?: Address,\n  interfaceAddresses?: InterfaceAddresses\n) {\n  const connection = new Connection(true, {\n    stunServer: stunServer ?? [\"stun.l.google.com\", 19302],\n  });\n  await connection.gatherCandidates();\n\n  const protocol = new StunProtocol(connection);\n  protocol.localCandidate = connection.localCandidates[0];\n  await protocol.connectionMade(true, undefined, interfaceAddresses);\n  const candidate = await serverReflexiveCandidate(protocol, [\n    \"stun.l.google.com\",\n    19302,\n  ]);\n\n  await connection.close();\n  await protocol.close();\n\n  if (!candidate?.host) {\n    throw new Error(\"host not exist\");\n  }\n\n  return candidate?.host;\n}\n\nexport function normalizeFamilyNodeV18(family: string | number): 4 | 6 {\n  if (family === \"IPv4\") return 4;\n  if (family === \"IPv6\") return 6;\n\n  return family as 4 | 6;\n}\n"]}